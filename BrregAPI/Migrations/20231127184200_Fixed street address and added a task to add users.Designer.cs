// <auto-generated />
using System;
using BrregAPI.Modals;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BrregAPI.Migrations
{
    [DbContext(typeof(BrregContext))]
    [Migration("20231127184200_Fixed street address and added a task to add users")]
    partial class Fixedstreetaddressandaddedatasktoaddusers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BrregAPI.Modals.Database.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GateAdresse")
                        .HasColumnType("text");

                    b.Property<string>("Kommune")
                        .HasColumnType("text");

                    b.Property<string>("Kommunenummer")
                        .HasColumnType("text");

                    b.Property<string>("Land")
                        .HasColumnType("text");

                    b.Property<string>("Landkode")
                        .HasColumnType("text");

                    b.Property<string>("Postnummer")
                        .HasColumnType("text");

                    b.Property<string>("Poststed")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Adresser");
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.Firma", b =>
                {
                    b.Property<long>("Organisasjonsnummer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Organisasjonsnummer"));

                    b.Property<long>("AntallAnsatte")
                        .HasColumnType("bigint");

                    b.Property<int?>("ForretningsadresseId")
                        .HasColumnType("integer");

                    b.Property<string>("Hjemmeside")
                        .HasColumnType("text");

                    b.Property<int?>("InstitusjonellSektorkode")
                        .HasColumnType("integer");

                    b.Property<bool>("Konkurs")
                        .HasColumnType("boolean");

                    b.Property<string>("Maalform")
                        .HasColumnType("text");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrganisasjonsKode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PostadresseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RegistreringsdatoEnhetsregisteret")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("RegistrertIForetaksregisteret")
                        .HasColumnType("boolean");

                    b.Property<bool>("RegistrertIFrivillighetsregisteret")
                        .HasColumnType("boolean");

                    b.Property<bool>("RegistrertIMvaregisteret")
                        .HasColumnType("boolean");

                    b.Property<bool>("RegistrertIStiftelsesregisteret")
                        .HasColumnType("boolean");

                    b.Property<long?>("SisteInnsendteAarsregnskap")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Stiftelsesdato")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("UnderAvvikling")
                        .HasColumnType("boolean");

                    b.Property<bool>("UnderTvangsavviklingEllerTvangsopplosning")
                        .HasColumnType("boolean");

                    b.HasKey("Organisasjonsnummer");

                    b.HasIndex("ForretningsadresseId");

                    b.HasIndex("PostadresseId");

                    b.ToTable("Firmaer");
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Epost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("FirmaOrganisasjonsnummer")
                        .HasColumnType("bigint");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rolle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RolleNavn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FirmaOrganisasjonsnummer");

                    b.ToTable("Personer");
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.Firma", b =>
                {
                    b.HasOne("BrregAPI.Modals.Database.Adresse", "Forretningsadresse")
                        .WithMany()
                        .HasForeignKey("ForretningsadresseId");

                    b.HasOne("BrregAPI.Modals.Database.Adresse", "Postadresse")
                        .WithMany()
                        .HasForeignKey("PostadresseId");

                    b.Navigation("Forretningsadresse");

                    b.Navigation("Postadresse");
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.Person", b =>
                {
                    b.HasOne("BrregAPI.Modals.Database.Firma", null)
                        .WithMany("Personer")
                        .HasForeignKey("FirmaOrganisasjonsnummer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BrregAPI.Modals.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BrregAPI.Modals.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrregAPI.Modals.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BrregAPI.Modals.Database.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrregAPI.Modals.Database.Firma", b =>
                {
                    b.Navigation("Personer");
                });
#pragma warning restore 612, 618
        }
    }
}
