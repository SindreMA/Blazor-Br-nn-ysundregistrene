@using BrregFrontend.DTOs
@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />
 <CascadingValue Name="UserData" Value="@_userData">
    <div class="page">
        @if (_userData.user != null)
        {
            <header class="shadow-lg gap-lg-5">
                <MudLink Href="#">Home</MudLink>
                <div class="seperatorLine" />
                <MudLink Href="/companies">Companies</MudLink>
                <div class="flex-grow-1" />
                <div class="d-flex align-items-center gap-4">
                    <p>Logged in as @_userData.user.Username</p>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnLogout" >Logout</MudButton>
                </div>
            </header>
        }

        <main class=" @(_userData.user != null ? "fullPageMain shadow-lg" : "")">
            @if (!loading)
            {
                @Body
            }
            else
            {
                <div class="d-flex justify-content-center align-items-center h-100">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Style="height:120px;width:120px;"
                        Size="Size.Large" />
                </div>
            }
        </main>
    </div>
</CascadingValue>

@code {

    private LoginData _userData = new LoginData()
     {
        user = null
     };

    private bool loading = true;

    private async Task AutoLogin() {
        var apiUrl = Environment.GetEnvironmentVariable("API_URL") ?? "http://localhost:5050/api";
        _userData.user = await Http.GetFromJsonAsync<UserObject>($"{apiUrl}/Auth");
    }

    private async Task LogoutCall()
    {
        var apiUrl = Environment.GetEnvironmentVariable("API_URL") ?? "http://localhost:5050/api";
        await Http.PostAsync($"{apiUrl}/auth/logout", null);
        _userData.user = null;
        _userData.ValuesChanged.Invoke();
    }

    private async Task OnLogout()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        try
        {
            await LogoutCall();
            Snackbar.Add("User logged out", Severity.Info);
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to logout, maybe already logged out", Severity.Error);
        }        
        NavManager.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        _userData.ValuesChanged += () => StateHasChanged();

        try
        {
            await AutoLogin();
        }
        catch (Exception e)
        {
            var uri = new Uri(NavManager.Uri).AbsolutePath.ToLower();
            if (!uri.EndsWith("/login") && !uri.EndsWith("/register"))
            {
                NavManager.NavigateTo("/login");
            }
            
        }
        loading = false;
    }
}